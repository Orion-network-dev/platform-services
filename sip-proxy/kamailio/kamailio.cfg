#!KAMAILIO

debug=2
log_stderror=no

memdbg=5
memlog=5

log_facility=LOG_LOCAL0
log_prefix="{$mt $hdr(CSeq)} "

use_dns_cache=off
dns_try_naptr=on
dns_srv_lb=on

tcp_accept_no_cl=yes



/* number of SIP routing processes */
children=1

####### Modules Section ########

/* set paths to location of modules */
loadmodule "kex.so"
loadmodule "corex.so"
loadmodule "tm.so"
loadmodule "tmx.so"
loadmodule "sl.so"
loadmodule "rr.so"
loadmodule "pv.so"
loadmodule "maxfwd.so"
loadmodule "textops.so"
loadmodule "siputils.so"
loadmodule "xlog.so"
loadmodule "sanity.so"
loadmodule "ctl.so"
loadmodule "cfg_rpc.so"
loadmodule "acc.so"
loadmodule "counters.so"
loadmodule "uac.so"
loadmodule "crypto.so"
loadmodule "auth.so"
loadmodule "textopsx.so"
loadmodule "exec.so"
loadmodule "xhttp.so"
loadmodule "dialog.so"


include_file "aes_conf.cfg"

# tm module config
# used for stateful sip messages processing.
modparam("tm", "failure_reply_mode", 3)
modparam("tm", "fr_timer", 30000)
modparam("tm", "fr_inv_timer", 120000)
modparam("tm", "rich_redirect", 3)
# rr module config
# used for dialog routing logic
modparam("rr", "enable_full_lr", 0)
modparam("rr", "append_fromtag", 1)
# uac module
# used for handling user auth
modparam("uac","auth_username_avp","$avp(auser)")
modparam("uac","auth_password_avp","$avp(apass)")
modparam("uac","auth_realm_avp","$avp(arealm)")

modparam("dialog", "track_cseq_updates", 1)

event_route[xhttp:request] {
    if ($hdr(X-Password) != $null) {
        crypto_aes_encrypt("$hdr(X-Password)", "$sel(cfg_get.aes.key)", "$var(encrypted)");
        xhttp_reply("200", "OK", "text/html","$(var(encrypted))");
    } else {
        xhttp_reply("400", "OK", "text/html", "Bad Request -- Missing X-Password header");
    }
}

request_route {
    # Immediatly forward cancel requests
    # if they are part of an ongoing transaction
    if (is_method("CANCEL") && t_check_trans()) {
        route(RELAY);
        exit;
    }

    # All other messages needs to be auth'ed
    route(AUTH);
    # Handle messages in sip dialogs
    route(WITHINDLG);


    # The user shall always be specified when calling the proxy
    if ($rU==$null) {
        sl_send_reply("484", "Address Incomplete -- You must specify a calling user");
        exit;
    }

    # The called user should always have six digits.
    if ($(tU{s.len}) != 6) {
        sl_send_reply("484", "Invalid address -- Destination must be six digits long");
        exit;
    }

    $avp(user_prefix) = $(tU{s.substr,0,3});
    $avp(user_prefix_number) = $(avp(user_prefix){s.int});

    if ($avp(user_prefix_number) < 1 && $avp(user_prefix_number) > 255) {
        sl_send_reply("484", "Invalid address -- No valid prefix");
        exit;
    }

    # We change the target domain to the target ipbx
    $td = "sip." + $avp(user_prefix_number) + ".orionet.re";
    $du = "sip:" + $avp(user_prefix_number) + ".orionet.re";

    dlg_manage();

    # We finally relay the messages.
    route(RELAY);
    exit;
}

route[AUTH] {
    # Save the original user
    $var(original_user) = $fU;

    # Update the from header before auth because we ignore the three last digits.
    $fU = $(fU{s.substr,0,3});
    # Apply the changes to the message
    msg_apply_changes();

    # We construct the domain from the first three digits.
    $var(source_prefix) = $(fU{s.substr,0,3}{s.int});
    exec_avp("python3 /etc/kamailio/query_password.py --id $(avp(user_prefix_number))", "$avp(password)");
    
    if ($avp(password) == $null) {
        sl_send_reply("484", "Invalid address -- Missing password records");
        exit;
    }

    crypto_aes_decrypt("$avp(password)", "$sel(cfg_get.aes.key)", "$var(password)");
    
    if ($var(password) == $null || $var(password) == 0) {
        sl_send_reply("484", "Invalid address -- Inalid signature");
        exit;
    }

    if (!pv_proxy_authenticate("orionet.re", "$var(password)", "0")) {
        xerr("password fail");
        proxy_challenge("orionet.re", "1");
        exit;
    }

    consume_credentials(); # Remove the credentials from the request

    # Restore the original from user
    $fU = $var(original_user);
    msg_apply_changes();
}


# Wrapper for relaying requests
route[RELAY] {
    if (is_method("MESSAGE|INVITE")) {
        if(!t_is_set("failure_route")) t_on_failure("MANAGE_FAILURE");
    }
    if (!t_relay()) {
        sl_reply_error();
    }

    exit;
}

# Handle requests within SIP dialogs
route[WITHINDLG] {
    if (!has_totag()) return;

    # sequential request within a dialog should
    # take the path determined by record-routing
    if (loose_route()) {
        if ( is_method("NOTIFY") ) {
            # Add Record-Route for in-dialog NOTIFY as per RFC 6665.
            record_route();
        }
        route(RELAY);
        exit;
    }

    if ( is_method("ACK") ) {
        if ( t_check_trans() ) {
            # no loose-route, but stateful ACK;
            # must be an ACK after a 487
            # or e.g. 404 from upstream server
            route(RELAY);
            exit;
        } else {
            # ACK without matching transaction ... ignore and discard
            exit;
        }
    }
    
    sl_send_reply("404", "Not here");
    exit;
}

# Manage failure routing cases
failure_route[MANAGE_FAILURE] {
    if (t_is_canceled()) exit;

    # If the error message is an auth failure.
    if(t_check_status("401|407")) {
        # We fetch the boxed SIP password.

        exec_avp("python3 /etc/kamailio/query_password.py --id $(avp(user_prefix_number))", "$avp(password)");
    
        if ($avp(password) != $null) {
            crypto_aes_decrypt("$avp(password)", "$sel(cfg_get.aes.key)", "$var(password)");
            # Update the password, user and 
            $avp(auser) = "orion";
            $avp(apass) = $var(password);
            if (uac_auth()) {
                t_relay();
            }
        }
    }
    exit;
}
